/* eslint-disable */
/**
 * NeuroScan
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@metacell.us
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import EmailForm from '../model/EmailForm';
import Error from '../model/Error';

/**
* EmailEmail service.
* @module api/EmailEmailApi
* @version 1.0.0
*/
export default class EmailEmailApi {

    /**
    * Constructs a new EmailEmailApi. 
    * @alias module:api/EmailEmailApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Send an email
     * @param {module:model/EmailForm} emailForm 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    emailPostWithHttpInfo(emailForm) {
      let postBody = emailForm;
      // verify the required parameter 'emailForm' is set
      if (emailForm === undefined || emailForm === null) {
        throw new Error("Missing the required parameter 'emailForm' when calling emailPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/email/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Send an email
     * @param {module:model/EmailForm} emailForm 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    emailPost(emailForm) {
      return this.emailPostWithHttpInfo(emailForm)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get the email settings
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    emailSettingsGetWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/email/settings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get the email settings
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    emailSettingsGet() {
      return this.emailSettingsGetWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Send an test email
     * @param {module:model/EmailForm} emailForm 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    emailTestPostWithHttpInfo(emailForm) {
      let postBody = emailForm;
      // verify the required parameter 'emailForm' is set
      if (emailForm === undefined || emailForm === null) {
        throw new Error("Missing the required parameter 'emailForm' when calling emailTestPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/email/test', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Send an test email
     * @param {module:model/EmailForm} emailForm 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    emailTestPost(emailForm) {
      return this.emailTestPostWithHttpInfo(emailForm)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
