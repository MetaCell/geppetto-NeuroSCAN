/* eslint-disable */
/**
 * NeuroScan
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@metacell.us
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import EmailConfirmationForm from '../model/EmailConfirmationForm';
import Error from '../model/Error';
import ForgotPasswordForm from '../model/ForgotPasswordForm';
import LocalAuthForm from '../model/LocalAuthForm';
import NewUsersPermissionsUser from '../model/NewUsersPermissionsUser';
import ResetPasswordForm from '../model/ResetPasswordForm';
import UsersPermissionsUser from '../model/UsersPermissionsUser';

/**
* UsersPermissionsUser service.
* @module api/UsersPermissionsUserApi
* @version 1.0.0
*/
export default class UsersPermissionsUserApi {

    /**
    * Constructs a new UsersPermissionsUserApi. 
    * @alias module:api/UsersPermissionsUserApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Validate a user account
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    authEmailConfirmationGetWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/auth/email-confirmation', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Validate a user account
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    authEmailConfirmationGet() {
      return this.authEmailConfirmationGetWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Send the reset password email link
     * @param {module:model/ForgotPasswordForm} forgotPasswordForm 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    authForgotPasswordPostWithHttpInfo(forgotPasswordForm) {
      let postBody = forgotPasswordForm;
      // verify the required parameter 'forgotPasswordForm' is set
      if (forgotPasswordForm === undefined || forgotPasswordForm === null) {
        throw new Error("Missing the required parameter 'forgotPasswordForm' when calling authForgotPasswordPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/auth/forgot-password', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Send the reset password email link
     * @param {module:model/ForgotPasswordForm} forgotPasswordForm 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    authForgotPasswordPost(forgotPasswordForm) {
      return this.authForgotPasswordPostWithHttpInfo(forgotPasswordForm)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Login a user using the identifiers email and password
     * @param {module:model/LocalAuthForm} localAuthForm 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    authLocalPostWithHttpInfo(localAuthForm) {
      let postBody = localAuthForm;
      // verify the required parameter 'localAuthForm' is set
      if (localAuthForm === undefined || localAuthForm === null) {
        throw new Error("Missing the required parameter 'localAuthForm' when calling authLocalPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/auth/local', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Login a user using the identifiers email and password
     * @param {module:model/LocalAuthForm} localAuthForm 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    authLocalPost(localAuthForm) {
      return this.authLocalPostWithHttpInfo(localAuthForm)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Register a new user with the default role
     * @param {module:model/NewUsersPermissionsUser} newUsersPermissionsUser 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UsersPermissionsUser} and HTTP response
     */
    authLocalRegisterPostWithHttpInfo(newUsersPermissionsUser) {
      let postBody = newUsersPermissionsUser;
      // verify the required parameter 'newUsersPermissionsUser' is set
      if (newUsersPermissionsUser === undefined || newUsersPermissionsUser === null) {
        throw new Error("Missing the required parameter 'newUsersPermissionsUser' when calling authLocalRegisterPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UsersPermissionsUser;
      return this.apiClient.callApi(
        '/auth/local/register', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Register a new user with the default role
     * @param {module:model/NewUsersPermissionsUser} newUsersPermissionsUser 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UsersPermissionsUser}
     */
    authLocalRegisterPost(newUsersPermissionsUser) {
      return this.authLocalRegisterPostWithHttpInfo(newUsersPermissionsUser)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Successfull redirection after approving a provider
     * @param {String} provider 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    authProviderCallbackGetWithHttpInfo(provider) {
      let postBody = null;
      // verify the required parameter 'provider' is set
      if (provider === undefined || provider === null) {
        throw new Error("Missing the required parameter 'provider' when calling authProviderCallbackGet");
      }

      let pathParams = {
        'provider': provider
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/auth/{provider}/callback', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Successfull redirection after approving a provider
     * @param {String} provider 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    authProviderCallbackGet(provider) {
      return this.authProviderCallbackGetWithHttpInfo(provider)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Reset user password with a code (resetToken)
     * @param {module:model/ResetPasswordForm} resetPasswordForm 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    authResetPasswordPostWithHttpInfo(resetPasswordForm) {
      let postBody = resetPasswordForm;
      // verify the required parameter 'resetPasswordForm' is set
      if (resetPasswordForm === undefined || resetPasswordForm === null) {
        throw new Error("Missing the required parameter 'resetPasswordForm' when calling authResetPasswordPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/auth/reset-password', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Reset user password with a code (resetToken)
     * @param {module:model/ResetPasswordForm} resetPasswordForm 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    authResetPasswordPost(resetPasswordForm) {
      return this.authResetPasswordPostWithHttpInfo(resetPasswordForm)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Send a confirmation email to user
     * @param {module:model/EmailConfirmationForm} emailConfirmationForm 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    authSendEmailConfirmationPostWithHttpInfo(emailConfirmationForm) {
      let postBody = emailConfirmationForm;
      // verify the required parameter 'emailConfirmationForm' is set
      if (emailConfirmationForm === undefined || emailConfirmationForm === null) {
        throw new Error("Missing the required parameter 'emailConfirmationForm' when calling authSendEmailConfirmationPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/auth/send-email-confirmation', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Send a confirmation email to user
     * @param {module:model/EmailConfirmationForm} emailConfirmationForm 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    authSendEmailConfirmationPost(emailConfirmationForm) {
      return this.authSendEmailConfirmationPostWithHttpInfo(emailConfirmationForm)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Connect a provider
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    connectGetWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/connect/*', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Connect a provider
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    connectGet() {
      return this.connectGetWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve all user documents
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit Maximum number of results possible
     * @param {String} opts.sort Sort according to a specific field.
     * @param {Number} opts.start Skip a specific number of entries (especially useful for pagination)
     * @param {String} opts.eq Get entries that matches exactly your input
     * @param {String} opts.ne Get records that are not equals to something
     * @param {String} opts.lt Get record that are lower than a value
     * @param {String} opts.lte Get records that are lower than or equal to a value
     * @param {String} opts.gt Get records that are greater than a value
     * @param {String} opts.gte Get records that are greater than  or equal a value
     * @param {String} opts.contains Get records that contains a value
     * @param {String} opts.containss Get records that contains (case sensitive) a value
     * @param {Array.<String>} opts._in Get records that matches any value in the array of values
     * @param {Array.<String>} opts.nin Get records that doesn't match any value in the array of values
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/UsersPermissionsUser>} and HTTP response
     */
    usersGetWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        '_limit': opts['limit'],
        '_sort': opts['sort'],
        '_start': opts['start'],
        '_eq': opts['eq'],
        '_ne': opts['ne'],
        '_lt': opts['lt'],
        '_lte': opts['lte'],
        '_gt': opts['gt'],
        '_gte': opts['gte'],
        '_contains': opts['contains'],
        '_containss': opts['containss'],
        '_in': this.apiClient.buildCollectionParam(opts['_in'], 'multi'),
        '_nin': this.apiClient.buildCollectionParam(opts['nin'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [UsersPermissionsUser];
      return this.apiClient.callApi(
        '/users', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve all user documents
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit Maximum number of results possible
     * @param {String} opts.sort Sort according to a specific field.
     * @param {Number} opts.start Skip a specific number of entries (especially useful for pagination)
     * @param {String} opts.eq Get entries that matches exactly your input
     * @param {String} opts.ne Get records that are not equals to something
     * @param {String} opts.lt Get record that are lower than a value
     * @param {String} opts.lte Get records that are lower than or equal to a value
     * @param {String} opts.gt Get records that are greater than a value
     * @param {String} opts.gte Get records that are greater than  or equal a value
     * @param {String} opts.contains Get records that contains a value
     * @param {String} opts.containss Get records that contains (case sensitive) a value
     * @param {Array.<String>} opts._in Get records that matches any value in the array of values
     * @param {Array.<String>} opts.nin Get records that doesn't match any value in the array of values
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/UsersPermissionsUser>}
     */
    usersGet(opts) {
      return this.usersGetWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete an existing user
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    usersIdDeleteWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling usersIdDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/users/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete an existing user
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    usersIdDelete(id) {
      return this.usersIdDeleteWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve a single user depending on his id
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UsersPermissionsUser} and HTTP response
     */
    usersIdGetWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling usersIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UsersPermissionsUser;
      return this.apiClient.callApi(
        '/users/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve a single user depending on his id
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UsersPermissionsUser}
     */
    usersIdGet(id) {
      return this.usersIdGetWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update an existing user
     * @param {String} id 
     * @param {module:model/NewUsersPermissionsUser} newUsersPermissionsUser 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UsersPermissionsUser} and HTTP response
     */
    usersIdPutWithHttpInfo(id, newUsersPermissionsUser) {
      let postBody = newUsersPermissionsUser;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling usersIdPut");
      }
      // verify the required parameter 'newUsersPermissionsUser' is set
      if (newUsersPermissionsUser === undefined || newUsersPermissionsUser === null) {
        throw new Error("Missing the required parameter 'newUsersPermissionsUser' when calling usersIdPut");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UsersPermissionsUser;
      return this.apiClient.callApi(
        '/users/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update an existing user
     * @param {String} id 
     * @param {module:model/NewUsersPermissionsUser} newUsersPermissionsUser 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UsersPermissionsUser}
     */
    usersIdPut(id, newUsersPermissionsUser) {
      return this.usersIdPutWithHttpInfo(id, newUsersPermissionsUser)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve the logged in user information
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UsersPermissionsUser} and HTTP response
     */
    usersMeGetWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UsersPermissionsUser;
      return this.apiClient.callApi(
        '/users/me', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve the logged in user information
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UsersPermissionsUser}
     */
    usersMeGet() {
      return this.usersMeGetWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Search for users
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit Maximum number of results possible
     * @param {String} opts.sort Sort according to a specific field.
     * @param {Number} opts.start Skip a specific number of entries (especially useful for pagination)
     * @param {String} opts.eq Get entries that matches exactly your input
     * @param {String} opts.ne Get records that are not equals to something
     * @param {String} opts.lt Get record that are lower than a value
     * @param {String} opts.lte Get records that are lower than or equal to a value
     * @param {String} opts.gt Get records that are greater than a value
     * @param {String} opts.gte Get records that are greater than  or equal a value
     * @param {String} opts.contains Get records that contains a value
     * @param {String} opts.containss Get records that contains (case sensitive) a value
     * @param {Array.<String>} opts._in Get records that matches any value in the array of values
     * @param {Array.<String>} opts.nin Get records that doesn't match any value in the array of values
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/UsersPermissionsUser>} and HTTP response
     */
    usersPermissionsSearchIdGetWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling usersPermissionsSearchIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        '_limit': opts['limit'],
        '_sort': opts['sort'],
        '_start': opts['start'],
        '_eq': opts['eq'],
        '_ne': opts['ne'],
        '_lt': opts['lt'],
        '_lte': opts['lte'],
        '_gt': opts['gt'],
        '_gte': opts['gte'],
        '_contains': opts['contains'],
        '_containss': opts['containss'],
        '_in': this.apiClient.buildCollectionParam(opts['_in'], 'multi'),
        '_nin': this.apiClient.buildCollectionParam(opts['nin'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [UsersPermissionsUser];
      return this.apiClient.callApi(
        '/users-permissions/search/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Search for users
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit Maximum number of results possible
     * @param {String} opts.sort Sort according to a specific field.
     * @param {Number} opts.start Skip a specific number of entries (especially useful for pagination)
     * @param {String} opts.eq Get entries that matches exactly your input
     * @param {String} opts.ne Get records that are not equals to something
     * @param {String} opts.lt Get record that are lower than a value
     * @param {String} opts.lte Get records that are lower than or equal to a value
     * @param {String} opts.gt Get records that are greater than a value
     * @param {String} opts.gte Get records that are greater than  or equal a value
     * @param {String} opts.contains Get records that contains a value
     * @param {String} opts.containss Get records that contains (case sensitive) a value
     * @param {Array.<String>} opts._in Get records that matches any value in the array of values
     * @param {Array.<String>} opts.nin Get records that doesn't match any value in the array of values
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/UsersPermissionsUser>}
     */
    usersPermissionsSearchIdGet(id, opts) {
      return this.usersPermissionsSearchIdGetWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
