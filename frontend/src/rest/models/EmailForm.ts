/* tslint:disable */
/* eslint-disable */
/**
 * NeuroScan
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@metacell.us
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface EmailForm
 */
export interface EmailForm {
    /**
     * 
     * @type {string}
     * @memberof EmailForm
     */
    to: string;
    /**
     * 
     * @type {string}
     * @memberof EmailForm
     */
    from: string;
    /**
     * 
     * @type {string}
     * @memberof EmailForm
     */
    cc?: string;
    /**
     * 
     * @type {string}
     * @memberof EmailForm
     */
    bcc?: string;
    /**
     * 
     * @type {string}
     * @memberof EmailForm
     */
    replyTo?: string;
    /**
     * 
     * @type {string}
     * @memberof EmailForm
     */
    subject: string;
    /**
     * 
     * @type {string}
     * @memberof EmailForm
     */
    text: string;
    /**
     * 
     * @type {string}
     * @memberof EmailForm
     */
    html?: string;
}

export function EmailFormFromJSON(json: any): EmailForm {
    return EmailFormFromJSONTyped(json, false);
}

export function EmailFormFromJSONTyped(json: any, ignoreDiscriminator: boolean): EmailForm {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'to': json['to'],
        'from': json['from'],
        'cc': !exists(json, 'cc') ? undefined : json['cc'],
        'bcc': !exists(json, 'bcc') ? undefined : json['bcc'],
        'replyTo': !exists(json, 'replyTo') ? undefined : json['replyTo'],
        'subject': json['subject'],
        'text': json['text'],
        'html': !exists(json, 'html') ? undefined : json['html'],
    };
}

export function EmailFormToJSON(value?: EmailForm | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'to': value.to,
        'from': value.from,
        'cc': value.cc,
        'bcc': value.bcc,
        'replyTo': value.replyTo,
        'subject': value.subject,
        'text': value.text,
        'html': value.html,
    };
}


