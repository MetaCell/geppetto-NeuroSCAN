/* tslint:disable */
/* eslint-disable */
/**
 * NeuroScan
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@metacell.us
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface UsersPermissionsRole
 */
export interface UsersPermissionsRole {
    /**
     * 
     * @type {string}
     * @memberof UsersPermissionsRole
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof UsersPermissionsRole
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof UsersPermissionsRole
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof UsersPermissionsRole
     */
    type?: string;
    /**
     * 
     * @type {Array<object>}
     * @memberof UsersPermissionsRole
     */
    permissions?: Array<object>;
    /**
     * 
     * @type {Array<object>}
     * @memberof UsersPermissionsRole
     */
    users?: Array<object>;
}

export function UsersPermissionsRoleFromJSON(json: any): UsersPermissionsRole {
    return UsersPermissionsRoleFromJSONTyped(json, false);
}

export function UsersPermissionsRoleFromJSONTyped(json: any, ignoreDiscriminator: boolean): UsersPermissionsRole {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'name': json['name'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'type': !exists(json, 'type') ? undefined : json['type'],
        'permissions': !exists(json, 'permissions') ? undefined : json['permissions'],
        'users': !exists(json, 'users') ? undefined : json['users'],
    };
}

export function UsersPermissionsRoleToJSON(value?: UsersPermissionsRole | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'name': value.name,
        'description': value.description,
        'type': value.type,
        'permissions': value.permissions,
        'users': value.users,
    };
}


