/* tslint:disable */
/* eslint-disable */
/**
 * NeuroScan
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@metacell.us
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    Neuron,
    NeuronFromJSON,
    NeuronFromJSONTyped,
    NeuronToJSON,
} from './';

/**
 * 
 * @export
 * @interface Synapse
 */
export interface Synapse {
    /**
     * 
     * @type {string}
     * @memberof Synapse
     */
    id: string;
    /**
     * 
     * @type {Neuron}
     * @memberof Synapse
     */
    neuronPre?: Neuron;
    /**
     * 
     * @type {Neuron}
     * @memberof Synapse
     */
    neuronPost?: Neuron;
    /**
     * 
     * @type {Array<object>}
     * @memberof Synapse
     */
    files?: Array<object>;
    /**
     * 
     * @type {string}
     * @memberof Synapse
     */
    type?: SynapseTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof Synapse
     */
    name?: string;
    /**
     * 
     * @type {Date}
     * @memberof Synapse
     */
    publishedAt?: Date;
}

/**
* @export
* @enum {string}
*/
export enum SynapseTypeEnum {
    Chemical = 'chemical',
    Electrical = 'electrical'
}

export function SynapseFromJSON(json: any): Synapse {
    return SynapseFromJSONTyped(json, false);
}

export function SynapseFromJSONTyped(json: any, ignoreDiscriminator: boolean): Synapse {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'neuronPre': !exists(json, 'neuronPre') ? undefined : NeuronFromJSON(json['neuronPre']),
        'neuronPost': !exists(json, 'neuronPost') ? undefined : NeuronFromJSON(json['neuronPost']),
        'files': !exists(json, 'files') ? undefined : json['files'],
        'type': !exists(json, 'type') ? undefined : json['type'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'publishedAt': !exists(json, 'published_at') ? undefined : (new Date(json['published_at'])),
    };
}

export function SynapseToJSON(value?: Synapse | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'neuronPre': NeuronToJSON(value.neuronPre),
        'neuronPost': NeuronToJSON(value.neuronPost),
        'files': value.files,
        'type': value.type,
        'name': value.name,
        'published_at': value.publishedAt === undefined ? undefined : (value.publishedAt.toISOString()),
    };
}


