/* tslint:disable */
/* eslint-disable */
/**
 * NeuroScan
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@metacell.us
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    Neuron,
    NeuronFromJSON,
    NeuronFromJSONTyped,
    NeuronToJSON,
} from './';

/**
 * 
 * @export
 * @interface Promoter
 */
export interface Promoter {
    /**
     * 
     * @type {string}
     * @memberof Promoter
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof Promoter
     */
    uid?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof Promoter
     */
    files?: Array<string>;
    /**
     * 
     * @type {Array<Neuron>}
     * @memberof Promoter
     */
    cellsByLineaging?: Array<Neuron>;
    /**
     * 
     * @type {string}
     * @memberof Promoter
     */
    metadata?: string;
    /**
     * 
     * @type {Array<number>}
     * @memberof Promoter
     */
    timepoints?: Array<number>;
    /**
     * 
     * @type {Date}
     * @memberof Promoter
     */
    publishedAt?: Date;
}

export function PromoterFromJSON(json: any): Promoter {
    return PromoterFromJSONTyped(json, false);
}

export function PromoterFromJSONTyped(json: any, ignoreDiscriminator: boolean): Promoter {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'uid': !exists(json, 'uid') ? undefined : json['uid'],
        'files': !exists(json, 'files') ? undefined : json['files'],
        'cellsByLineaging': !exists(json, 'cellsByLineaging') ? undefined : ((json['cellsByLineaging'] as Array<any>).map(NeuronFromJSON)),
        'metadata': !exists(json, 'metadata') ? undefined : json['metadata'],
        'timepoints': !exists(json, 'timepoints') ? undefined : json['timepoints'],
        'publishedAt': !exists(json, 'published_at') ? undefined : (new Date(json['published_at'])),
    };
}

export function PromoterToJSON(value?: Promoter | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'uid': value.uid,
        'files': value.files,
        'cellsByLineaging': value.cellsByLineaging === undefined ? undefined : ((value.cellsByLineaging as Array<any>).map(NeuronToJSON)),
        'metadata': value.metadata,
        'timepoints': value.timepoints,
        'published_at': value.publishedAt === undefined ? undefined : (value.publishedAt.toISOString()),
    };
}


