/* tslint:disable */
/* eslint-disable */
/**
 * NeuroScan
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@metacell.us
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    UploadForm,
    UploadFormFromJSON,
    UploadFormToJSON,
} from '../models';

export interface UploadFilesIdDeleteRequest {
    id: string;
}

export interface UploadFilesIdGetRequest {
    id: string;
}

export interface UploadPostRequest {
    uploadForm: UploadForm;
}

export interface UploadSearchIdGetRequest {
    id: string;
}

/**
 * 
 */
export class UploadFileApi extends runtime.BaseAPI {

    /**
     * Retrieve the total number of uploaded files
     */
    async uploadFilesCountGetRaw(): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/upload/files/count`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Retrieve the total number of uploaded files
     */
    async uploadFilesCountGet(): Promise<object> {
        const response = await this.uploadFilesCountGetRaw();
        return await response.value();
    }

    /**
     * Retrieve all file documents
     */
    async uploadFilesGetRaw(): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/upload/files`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Retrieve all file documents
     */
    async uploadFilesGet(): Promise<object> {
        const response = await this.uploadFilesGetRaw();
        return await response.value();
    }

    /**
     * Delete an uploaded file
     */
    async uploadFilesIdDeleteRaw(requestParameters: UploadFilesIdDeleteRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling uploadFilesIdDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/upload/files/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Delete an uploaded file
     */
    async uploadFilesIdDelete(requestParameters: UploadFilesIdDeleteRequest): Promise<object> {
        const response = await this.uploadFilesIdDeleteRaw(requestParameters);
        return await response.value();
    }

    /**
     * Retrieve a single file depending on its id
     */
    async uploadFilesIdGetRaw(requestParameters: UploadFilesIdGetRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling uploadFilesIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/upload/files/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Retrieve a single file depending on its id
     */
    async uploadFilesIdGet(requestParameters: UploadFilesIdGetRequest): Promise<object> {
        const response = await this.uploadFilesIdGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * Upload a file
     */
    async uploadPostRaw(requestParameters: UploadPostRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.uploadForm === null || requestParameters.uploadForm === undefined) {
            throw new runtime.RequiredError('uploadForm','Required parameter requestParameters.uploadForm was null or undefined when calling uploadPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/upload/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UploadFormToJSON(requestParameters.uploadForm),
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Upload a file
     */
    async uploadPost(requestParameters: UploadPostRequest): Promise<object> {
        const response = await this.uploadPostRaw(requestParameters);
        return await response.value();
    }

    /**
     * Search for an uploaded file
     */
    async uploadSearchIdGetRaw(requestParameters: UploadSearchIdGetRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling uploadSearchIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/upload/search/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Search for an uploaded file
     */
    async uploadSearchIdGet(requestParameters: UploadSearchIdGetRequest): Promise<object> {
        const response = await this.uploadSearchIdGetRaw(requestParameters);
        return await response.value();
    }

}
