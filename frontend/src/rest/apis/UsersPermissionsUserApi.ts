/* tslint:disable */
/* eslint-disable */
/**
 * NeuroScan
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@metacell.us
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    EmailConfirmationForm,
    EmailConfirmationFormFromJSON,
    EmailConfirmationFormToJSON,
    ForgotPasswordForm,
    ForgotPasswordFormFromJSON,
    ForgotPasswordFormToJSON,
    LocalAuthForm,
    LocalAuthFormFromJSON,
    LocalAuthFormToJSON,
    NewUsersPermissionsUser,
    NewUsersPermissionsUserFromJSON,
    NewUsersPermissionsUserToJSON,
    ResetPasswordForm,
    ResetPasswordFormFromJSON,
    ResetPasswordFormToJSON,
    UsersPermissionsUser,
    UsersPermissionsUserFromJSON,
    UsersPermissionsUserToJSON,
} from '../models';

export interface AuthForgotPasswordPostRequest {
    forgotPasswordForm: ForgotPasswordForm;
}

export interface AuthLocalPostRequest {
    localAuthForm: LocalAuthForm;
}

export interface AuthLocalRegisterPostRequest {
    newUsersPermissionsUser: NewUsersPermissionsUser;
}

export interface AuthProviderCallbackGetRequest {
    provider: string;
}

export interface AuthResetPasswordPostRequest {
    resetPasswordForm: ResetPasswordForm;
}

export interface AuthSendEmailConfirmationPostRequest {
    emailConfirmationForm: EmailConfirmationForm;
}

export interface UsersGetRequest {
    limit?: number;
    sort?: string;
    start?: number;
    eq?: string;
    ne?: string;
    lt?: string;
    lte?: string;
    gt?: string;
    gte?: string;
    contains?: string;
    containss?: string;
    _in?: Array<string>;
    nin?: Array<string>;
}

export interface UsersIdDeleteRequest {
    id: string;
}

export interface UsersIdGetRequest {
    id: string;
}

export interface UsersIdPutRequest {
    id: string;
    newUsersPermissionsUser: NewUsersPermissionsUser;
}

export interface UsersPermissionsSearchIdGetRequest {
    id: string;
    limit?: number;
    sort?: string;
    start?: number;
    eq?: string;
    ne?: string;
    lt?: string;
    lte?: string;
    gt?: string;
    gte?: string;
    contains?: string;
    containss?: string;
    _in?: Array<string>;
    nin?: Array<string>;
}

/**
 * 
 */
export class UsersPermissionsUserApi extends runtime.BaseAPI {

    /**
     * Validate a user account
     */
    async authEmailConfirmationGetRaw(): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/auth/email-confirmation`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Validate a user account
     */
    async authEmailConfirmationGet(): Promise<object> {
        const response = await this.authEmailConfirmationGetRaw();
        return await response.value();
    }

    /**
     * Send the reset password email link
     */
    async authForgotPasswordPostRaw(requestParameters: AuthForgotPasswordPostRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.forgotPasswordForm === null || requestParameters.forgotPasswordForm === undefined) {
            throw new runtime.RequiredError('forgotPasswordForm','Required parameter requestParameters.forgotPasswordForm was null or undefined when calling authForgotPasswordPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/auth/forgot-password`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ForgotPasswordFormToJSON(requestParameters.forgotPasswordForm),
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Send the reset password email link
     */
    async authForgotPasswordPost(requestParameters: AuthForgotPasswordPostRequest): Promise<object> {
        const response = await this.authForgotPasswordPostRaw(requestParameters);
        return await response.value();
    }

    /**
     * Login a user using the identifiers email and password
     */
    async authLocalPostRaw(requestParameters: AuthLocalPostRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.localAuthForm === null || requestParameters.localAuthForm === undefined) {
            throw new runtime.RequiredError('localAuthForm','Required parameter requestParameters.localAuthForm was null or undefined when calling authLocalPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/auth/local`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LocalAuthFormToJSON(requestParameters.localAuthForm),
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Login a user using the identifiers email and password
     */
    async authLocalPost(requestParameters: AuthLocalPostRequest): Promise<object> {
        const response = await this.authLocalPostRaw(requestParameters);
        return await response.value();
    }

    /**
     * Register a new user with the default role
     */
    async authLocalRegisterPostRaw(requestParameters: AuthLocalRegisterPostRequest): Promise<runtime.ApiResponse<UsersPermissionsUser>> {
        if (requestParameters.newUsersPermissionsUser === null || requestParameters.newUsersPermissionsUser === undefined) {
            throw new runtime.RequiredError('newUsersPermissionsUser','Required parameter requestParameters.newUsersPermissionsUser was null or undefined when calling authLocalRegisterPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/auth/local/register`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NewUsersPermissionsUserToJSON(requestParameters.newUsersPermissionsUser),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => UsersPermissionsUserFromJSON(jsonValue));
    }

    /**
     * Register a new user with the default role
     */
    async authLocalRegisterPost(requestParameters: AuthLocalRegisterPostRequest): Promise<UsersPermissionsUser> {
        const response = await this.authLocalRegisterPostRaw(requestParameters);
        return await response.value();
    }

    /**
     * Successfull redirection after approving a provider
     */
    async authProviderCallbackGetRaw(requestParameters: AuthProviderCallbackGetRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.provider === null || requestParameters.provider === undefined) {
            throw new runtime.RequiredError('provider','Required parameter requestParameters.provider was null or undefined when calling authProviderCallbackGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/auth/{provider}/callback`.replace(`{${"provider"}}`, encodeURIComponent(String(requestParameters.provider))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Successfull redirection after approving a provider
     */
    async authProviderCallbackGet(requestParameters: AuthProviderCallbackGetRequest): Promise<object> {
        const response = await this.authProviderCallbackGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * Reset user password with a code (resetToken)
     */
    async authResetPasswordPostRaw(requestParameters: AuthResetPasswordPostRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.resetPasswordForm === null || requestParameters.resetPasswordForm === undefined) {
            throw new runtime.RequiredError('resetPasswordForm','Required parameter requestParameters.resetPasswordForm was null or undefined when calling authResetPasswordPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/auth/reset-password`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ResetPasswordFormToJSON(requestParameters.resetPasswordForm),
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Reset user password with a code (resetToken)
     */
    async authResetPasswordPost(requestParameters: AuthResetPasswordPostRequest): Promise<object> {
        const response = await this.authResetPasswordPostRaw(requestParameters);
        return await response.value();
    }

    /**
     * Send a confirmation email to user
     */
    async authSendEmailConfirmationPostRaw(requestParameters: AuthSendEmailConfirmationPostRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.emailConfirmationForm === null || requestParameters.emailConfirmationForm === undefined) {
            throw new runtime.RequiredError('emailConfirmationForm','Required parameter requestParameters.emailConfirmationForm was null or undefined when calling authSendEmailConfirmationPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/auth/send-email-confirmation`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EmailConfirmationFormToJSON(requestParameters.emailConfirmationForm),
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Send a confirmation email to user
     */
    async authSendEmailConfirmationPost(requestParameters: AuthSendEmailConfirmationPostRequest): Promise<object> {
        const response = await this.authSendEmailConfirmationPostRaw(requestParameters);
        return await response.value();
    }

    /**
     * Connect a provider
     */
    async connectGetRaw(): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/connect/*`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Connect a provider
     */
    async connectGet(): Promise<object> {
        const response = await this.connectGetRaw();
        return await response.value();
    }

    /**
     * Retrieve all user documents
     */
    async usersGetRaw(requestParameters: UsersGetRequest): Promise<runtime.ApiResponse<Array<UsersPermissionsUser>>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['_limit'] = requestParameters.limit;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters['_sort'] = requestParameters.sort;
        }

        if (requestParameters.start !== undefined) {
            queryParameters['_start'] = requestParameters.start;
        }

        if (requestParameters.eq !== undefined) {
            queryParameters['_eq'] = requestParameters.eq;
        }

        if (requestParameters.ne !== undefined) {
            queryParameters['_ne'] = requestParameters.ne;
        }

        if (requestParameters.lt !== undefined) {
            queryParameters['_lt'] = requestParameters.lt;
        }

        if (requestParameters.lte !== undefined) {
            queryParameters['_lte'] = requestParameters.lte;
        }

        if (requestParameters.gt !== undefined) {
            queryParameters['_gt'] = requestParameters.gt;
        }

        if (requestParameters.gte !== undefined) {
            queryParameters['_gte'] = requestParameters.gte;
        }

        if (requestParameters.contains !== undefined) {
            queryParameters['_contains'] = requestParameters.contains;
        }

        if (requestParameters.containss !== undefined) {
            queryParameters['_containss'] = requestParameters.containss;
        }

        if (requestParameters._in) {
            queryParameters['_in'] = requestParameters._in;
        }

        if (requestParameters.nin) {
            queryParameters['_nin'] = requestParameters.nin;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/users`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UsersPermissionsUserFromJSON));
    }

    /**
     * Retrieve all user documents
     */
    async usersGet(requestParameters: UsersGetRequest): Promise<Array<UsersPermissionsUser>> {
        const response = await this.usersGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * Delete an existing user
     */
    async usersIdDeleteRaw(requestParameters: UsersIdDeleteRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling usersIdDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/users/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Delete an existing user
     */
    async usersIdDelete(requestParameters: UsersIdDeleteRequest): Promise<object> {
        const response = await this.usersIdDeleteRaw(requestParameters);
        return await response.value();
    }

    /**
     * Retrieve a single user depending on his id
     */
    async usersIdGetRaw(requestParameters: UsersIdGetRequest): Promise<runtime.ApiResponse<UsersPermissionsUser>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling usersIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/users/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => UsersPermissionsUserFromJSON(jsonValue));
    }

    /**
     * Retrieve a single user depending on his id
     */
    async usersIdGet(requestParameters: UsersIdGetRequest): Promise<UsersPermissionsUser> {
        const response = await this.usersIdGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * Update an existing user
     */
    async usersIdPutRaw(requestParameters: UsersIdPutRequest): Promise<runtime.ApiResponse<UsersPermissionsUser>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling usersIdPut.');
        }

        if (requestParameters.newUsersPermissionsUser === null || requestParameters.newUsersPermissionsUser === undefined) {
            throw new runtime.RequiredError('newUsersPermissionsUser','Required parameter requestParameters.newUsersPermissionsUser was null or undefined when calling usersIdPut.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/users/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: NewUsersPermissionsUserToJSON(requestParameters.newUsersPermissionsUser),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => UsersPermissionsUserFromJSON(jsonValue));
    }

    /**
     * Update an existing user
     */
    async usersIdPut(requestParameters: UsersIdPutRequest): Promise<UsersPermissionsUser> {
        const response = await this.usersIdPutRaw(requestParameters);
        return await response.value();
    }

    /**
     * Retrieve the logged in user information
     */
    async usersMeGetRaw(): Promise<runtime.ApiResponse<UsersPermissionsUser>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/users/me`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => UsersPermissionsUserFromJSON(jsonValue));
    }

    /**
     * Retrieve the logged in user information
     */
    async usersMeGet(): Promise<UsersPermissionsUser> {
        const response = await this.usersMeGetRaw();
        return await response.value();
    }

    /**
     * Search for users
     */
    async usersPermissionsSearchIdGetRaw(requestParameters: UsersPermissionsSearchIdGetRequest): Promise<runtime.ApiResponse<Array<UsersPermissionsUser>>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling usersPermissionsSearchIdGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['_limit'] = requestParameters.limit;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters['_sort'] = requestParameters.sort;
        }

        if (requestParameters.start !== undefined) {
            queryParameters['_start'] = requestParameters.start;
        }

        if (requestParameters.eq !== undefined) {
            queryParameters['_eq'] = requestParameters.eq;
        }

        if (requestParameters.ne !== undefined) {
            queryParameters['_ne'] = requestParameters.ne;
        }

        if (requestParameters.lt !== undefined) {
            queryParameters['_lt'] = requestParameters.lt;
        }

        if (requestParameters.lte !== undefined) {
            queryParameters['_lte'] = requestParameters.lte;
        }

        if (requestParameters.gt !== undefined) {
            queryParameters['_gt'] = requestParameters.gt;
        }

        if (requestParameters.gte !== undefined) {
            queryParameters['_gte'] = requestParameters.gte;
        }

        if (requestParameters.contains !== undefined) {
            queryParameters['_contains'] = requestParameters.contains;
        }

        if (requestParameters.containss !== undefined) {
            queryParameters['_containss'] = requestParameters.containss;
        }

        if (requestParameters._in) {
            queryParameters['_in'] = requestParameters._in;
        }

        if (requestParameters.nin) {
            queryParameters['_nin'] = requestParameters.nin;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/users-permissions/search/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UsersPermissionsUserFromJSON));
    }

    /**
     * Search for users
     */
    async usersPermissionsSearchIdGet(requestParameters: UsersPermissionsSearchIdGetRequest): Promise<Array<UsersPermissionsUser>> {
        const response = await this.usersPermissionsSearchIdGetRaw(requestParameters);
        return await response.value();
    }

}
