/* tslint:disable */
/* eslint-disable */
/**
 * NeuroScan
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@metacell.us
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Neuron,
    NeuronFromJSON,
    NeuronToJSON,
    NewNeuron,
    NewNeuronFromJSON,
    NewNeuronToJSON,
} from '../models';

export interface NeuronsGetRequest {
    limit?: number;
    sort?: string;
    start?: number;
    eq?: string;
    ne?: string;
    lt?: string;
    lte?: string;
    gt?: string;
    gte?: string;
    contains?: string;
    containss?: string;
    _in?: Array<string>;
    nin?: Array<string>;
}

export interface NeuronsIdDeleteRequest {
    id: string;
}

export interface NeuronsIdGetRequest {
    id: string;
}

export interface NeuronsIdPutRequest {
    id: string;
    newNeuron: NewNeuron;
}

export interface NeuronsPostRequest {
    newNeuron: NewNeuron;
}

/**
 * 
 */
export class NeuronApi extends runtime.BaseAPI {

    /**
     */
    async neuronsCountGetRaw(): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/neurons/count`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async neuronsCountGet(): Promise<object> {
        const response = await this.neuronsCountGetRaw();
        return await response.value();
    }

    /**
     */
    async neuronsGetRaw(requestParameters: NeuronsGetRequest): Promise<runtime.ApiResponse<Array<Neuron>>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['_limit'] = requestParameters.limit;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters['_sort'] = requestParameters.sort;
        }

        if (requestParameters.start !== undefined) {
            queryParameters['_start'] = requestParameters.start;
        }

        if (requestParameters.eq !== undefined) {
            queryParameters['_eq'] = requestParameters.eq;
        }

        if (requestParameters.ne !== undefined) {
            queryParameters['_ne'] = requestParameters.ne;
        }

        if (requestParameters.lt !== undefined) {
            queryParameters['_lt'] = requestParameters.lt;
        }

        if (requestParameters.lte !== undefined) {
            queryParameters['_lte'] = requestParameters.lte;
        }

        if (requestParameters.gt !== undefined) {
            queryParameters['_gt'] = requestParameters.gt;
        }

        if (requestParameters.gte !== undefined) {
            queryParameters['_gte'] = requestParameters.gte;
        }

        if (requestParameters.contains !== undefined) {
            queryParameters['_contains'] = requestParameters.contains;
        }

        if (requestParameters.containss !== undefined) {
            queryParameters['_containss'] = requestParameters.containss;
        }

        if (requestParameters._in) {
            queryParameters['_in'] = requestParameters._in;
        }

        if (requestParameters.nin) {
            queryParameters['_nin'] = requestParameters.nin;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/neurons`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(NeuronFromJSON));
    }

    /**
     */
    async neuronsGet(requestParameters: NeuronsGetRequest): Promise<Array<Neuron>> {
        const response = await this.neuronsGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * Delete a record
     */
    async neuronsIdDeleteRaw(requestParameters: NeuronsIdDeleteRequest): Promise<runtime.ApiResponse<number>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling neuronsIdDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/neurons/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Delete a record
     */
    async neuronsIdDelete(requestParameters: NeuronsIdDeleteRequest): Promise<number> {
        const response = await this.neuronsIdDeleteRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async neuronsIdGetRaw(requestParameters: NeuronsIdGetRequest): Promise<runtime.ApiResponse<Neuron>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling neuronsIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/neurons/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => NeuronFromJSON(jsonValue));
    }

    /**
     */
    async neuronsIdGet(requestParameters: NeuronsIdGetRequest): Promise<Neuron> {
        const response = await this.neuronsIdGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * Update a record
     */
    async neuronsIdPutRaw(requestParameters: NeuronsIdPutRequest): Promise<runtime.ApiResponse<Neuron>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling neuronsIdPut.');
        }

        if (requestParameters.newNeuron === null || requestParameters.newNeuron === undefined) {
            throw new runtime.RequiredError('newNeuron','Required parameter requestParameters.newNeuron was null or undefined when calling neuronsIdPut.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/neurons/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: NewNeuronToJSON(requestParameters.newNeuron),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => NeuronFromJSON(jsonValue));
    }

    /**
     * Update a record
     */
    async neuronsIdPut(requestParameters: NeuronsIdPutRequest): Promise<Neuron> {
        const response = await this.neuronsIdPutRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create a new record
     */
    async neuronsPostRaw(requestParameters: NeuronsPostRequest): Promise<runtime.ApiResponse<Neuron>> {
        if (requestParameters.newNeuron === null || requestParameters.newNeuron === undefined) {
            throw new runtime.RequiredError('newNeuron','Required parameter requestParameters.newNeuron was null or undefined when calling neuronsPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/neurons`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NewNeuronToJSON(requestParameters.newNeuron),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => NeuronFromJSON(jsonValue));
    }

    /**
     * Create a new record
     */
    async neuronsPost(requestParameters: NeuronsPostRequest): Promise<Neuron> {
        const response = await this.neuronsPostRaw(requestParameters);
        return await response.value();
    }

}
