/* tslint:disable */
/* eslint-disable */
/**
 * NeuroScan
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@metacell.us
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    NewUsersPermissionsRole,
    NewUsersPermissionsRoleFromJSON,
    NewUsersPermissionsRoleToJSON,
    UsersPermissionsRole,
    UsersPermissionsRoleFromJSON,
    UsersPermissionsRoleToJSON,
} from '../models';

export interface UsersPermissionsRolesGetRequest {
    limit?: number;
    sort?: string;
    start?: number;
    eq?: string;
    ne?: string;
    lt?: string;
    lte?: string;
    gt?: string;
    gte?: string;
    contains?: string;
    containss?: string;
    _in?: Array<string>;
    nin?: Array<string>;
}

export interface UsersPermissionsRolesIdGetRequest {
    id: string;
}

export interface UsersPermissionsRolesPostRequest {
    newUsersPermissionsRole: NewUsersPermissionsRole;
}

export interface UsersPermissionsRolesRoleDeleteRequest {
    role: string;
}

export interface UsersPermissionsRolesRolePutRequest {
    role: string;
    newUsersPermissionsRole: NewUsersPermissionsRole;
}

/**
 * 
 */
export class UsersPermissionsRoleApi extends runtime.BaseAPI {

    /**
     * Retrieve all role documents
     */
    async usersPermissionsRolesGetRaw(requestParameters: UsersPermissionsRolesGetRequest): Promise<runtime.ApiResponse<Array<UsersPermissionsRole>>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['_limit'] = requestParameters.limit;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters['_sort'] = requestParameters.sort;
        }

        if (requestParameters.start !== undefined) {
            queryParameters['_start'] = requestParameters.start;
        }

        if (requestParameters.eq !== undefined) {
            queryParameters['_eq'] = requestParameters.eq;
        }

        if (requestParameters.ne !== undefined) {
            queryParameters['_ne'] = requestParameters.ne;
        }

        if (requestParameters.lt !== undefined) {
            queryParameters['_lt'] = requestParameters.lt;
        }

        if (requestParameters.lte !== undefined) {
            queryParameters['_lte'] = requestParameters.lte;
        }

        if (requestParameters.gt !== undefined) {
            queryParameters['_gt'] = requestParameters.gt;
        }

        if (requestParameters.gte !== undefined) {
            queryParameters['_gte'] = requestParameters.gte;
        }

        if (requestParameters.contains !== undefined) {
            queryParameters['_contains'] = requestParameters.contains;
        }

        if (requestParameters.containss !== undefined) {
            queryParameters['_containss'] = requestParameters.containss;
        }

        if (requestParameters._in) {
            queryParameters['_in'] = requestParameters._in;
        }

        if (requestParameters.nin) {
            queryParameters['_nin'] = requestParameters.nin;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/users-permissions/roles`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UsersPermissionsRoleFromJSON));
    }

    /**
     * Retrieve all role documents
     */
    async usersPermissionsRolesGet(requestParameters: UsersPermissionsRolesGetRequest): Promise<Array<UsersPermissionsRole>> {
        const response = await this.usersPermissionsRolesGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * Retrieve a role depending on its id
     */
    async usersPermissionsRolesIdGetRaw(requestParameters: UsersPermissionsRolesIdGetRequest): Promise<runtime.ApiResponse<UsersPermissionsRole>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling usersPermissionsRolesIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/users-permissions/roles/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => UsersPermissionsRoleFromJSON(jsonValue));
    }

    /**
     * Retrieve a role depending on its id
     */
    async usersPermissionsRolesIdGet(requestParameters: UsersPermissionsRolesIdGetRequest): Promise<UsersPermissionsRole> {
        const response = await this.usersPermissionsRolesIdGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create a new role
     */
    async usersPermissionsRolesPostRaw(requestParameters: UsersPermissionsRolesPostRequest): Promise<runtime.ApiResponse<UsersPermissionsRole>> {
        if (requestParameters.newUsersPermissionsRole === null || requestParameters.newUsersPermissionsRole === undefined) {
            throw new runtime.RequiredError('newUsersPermissionsRole','Required parameter requestParameters.newUsersPermissionsRole was null or undefined when calling usersPermissionsRolesPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/users-permissions/roles`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NewUsersPermissionsRoleToJSON(requestParameters.newUsersPermissionsRole),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => UsersPermissionsRoleFromJSON(jsonValue));
    }

    /**
     * Create a new role
     */
    async usersPermissionsRolesPost(requestParameters: UsersPermissionsRolesPostRequest): Promise<UsersPermissionsRole> {
        const response = await this.usersPermissionsRolesPostRaw(requestParameters);
        return await response.value();
    }

    /**
     * Delete a role
     */
    async usersPermissionsRolesRoleDeleteRaw(requestParameters: UsersPermissionsRolesRoleDeleteRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.role === null || requestParameters.role === undefined) {
            throw new runtime.RequiredError('role','Required parameter requestParameters.role was null or undefined when calling usersPermissionsRolesRoleDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/users-permissions/roles/{role}`.replace(`{${"role"}}`, encodeURIComponent(String(requestParameters.role))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Delete a role
     */
    async usersPermissionsRolesRoleDelete(requestParameters: UsersPermissionsRolesRoleDeleteRequest): Promise<object> {
        const response = await this.usersPermissionsRolesRoleDeleteRaw(requestParameters);
        return await response.value();
    }

    /**
     * Update a role
     */
    async usersPermissionsRolesRolePutRaw(requestParameters: UsersPermissionsRolesRolePutRequest): Promise<runtime.ApiResponse<UsersPermissionsRole>> {
        if (requestParameters.role === null || requestParameters.role === undefined) {
            throw new runtime.RequiredError('role','Required parameter requestParameters.role was null or undefined when calling usersPermissionsRolesRolePut.');
        }

        if (requestParameters.newUsersPermissionsRole === null || requestParameters.newUsersPermissionsRole === undefined) {
            throw new runtime.RequiredError('newUsersPermissionsRole','Required parameter requestParameters.newUsersPermissionsRole was null or undefined when calling usersPermissionsRolesRolePut.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/users-permissions/roles/{role}`.replace(`{${"role"}}`, encodeURIComponent(String(requestParameters.role))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: NewUsersPermissionsRoleToJSON(requestParameters.newUsersPermissionsRole),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => UsersPermissionsRoleFromJSON(jsonValue));
    }

    /**
     * Update a role
     */
    async usersPermissionsRolesRolePut(requestParameters: UsersPermissionsRolesRolePutRequest): Promise<UsersPermissionsRole> {
        const response = await this.usersPermissionsRolesRolePutRaw(requestParameters);
        return await response.value();
    }

}
