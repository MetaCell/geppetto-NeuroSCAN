/* tslint:disable */
/* eslint-disable */
/**
 * NeuroScan
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@metacell.us
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    EmailForm,
    EmailFormFromJSON,
    EmailFormToJSON,
} from '../models';

export interface EmailPostRequest {
    emailForm: EmailForm;
}

export interface EmailTestPostRequest {
    emailForm: EmailForm;
}

/**
 * 
 */
export class EmailEmailApi extends runtime.BaseAPI {

    /**
     * Send an email
     */
    async emailPostRaw(requestParameters: EmailPostRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.emailForm === null || requestParameters.emailForm === undefined) {
            throw new runtime.RequiredError('emailForm','Required parameter requestParameters.emailForm was null or undefined when calling emailPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/email/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EmailFormToJSON(requestParameters.emailForm),
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Send an email
     */
    async emailPost(requestParameters: EmailPostRequest): Promise<object> {
        const response = await this.emailPostRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get the email settings
     */
    async emailSettingsGetRaw(): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/email/settings`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Get the email settings
     */
    async emailSettingsGet(): Promise<object> {
        const response = await this.emailSettingsGetRaw();
        return await response.value();
    }

    /**
     * Send an test email
     */
    async emailTestPostRaw(requestParameters: EmailTestPostRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.emailForm === null || requestParameters.emailForm === undefined) {
            throw new runtime.RequiredError('emailForm','Required parameter requestParameters.emailForm was null or undefined when calling emailTestPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/email/test`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EmailFormToJSON(requestParameters.emailForm),
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Send an test email
     */
    async emailTestPost(requestParameters: EmailTestPostRequest): Promise<object> {
        const response = await this.emailTestPostRaw(requestParameters);
        return await response.value();
    }

}
